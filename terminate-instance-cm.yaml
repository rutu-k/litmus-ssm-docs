kind: ConfigMap
apiVersion: v1
metadata:
  name: litmus-terminate-instance
  namespace: litmus
data:
  litmus-terminate-instance.yaml: |
    ---
    description: |
      ### Document name - Terminate-EC2-Instance
      ## What does this document do?
      This document will terminate the specied EC2 instance

    schemaVersion: '2.2'
    parameters:
      RoleArn:
        type: String
        description: '(Required) Specify the iam role arn'
        default: 'arn:aws:iam::xxxxxxxxxxxx:role/test'
      Region:
        type: String
        description: Specify the region
        default: 'us-west-1'
      InstallDependencies:
        type: String
        description: 'If set to True, Systems Manager installs the required dependencies
          on the target instances (default: True)'
        default: 'True'
        allowedValues:
        - 'True'
        - 'False'
    mainSteps:
    - action: aws:runShellScript
      name: InstallDependencies
      precondition:
        StringEquals:
        - platformType
        - Linux
      description: |
        ## Parameter: InstallDependencies
        If set to True, this step installs the required dependecy via operating system's repository. It supports both
        Debian (apt) and CentOS (yum) based package managers.
      inputs:
        onFailure: exit
        runCommand:
        - |
          #!/bin/bash

          if [[ "$( which jq 2>/dev/null )" ]] ; then echo Dependency is already installed. ; exit ; fi
          if  [[ "{{ InstallDependencies }}" == True ]] ; then
            echo "Installing required dependencies"
            if [ -f  "/etc/system-release" ] ; then
              if cat /etc/system-release | grep -i 'Amazon Linux' ; then
                sudo yum -y install jq
              else
                echo "There was a problem installing dependencies."
                exit 1
              fi
            fi
          else
            echo "Dependencies are not installed - Please set InstallDependencies to True."
            exit 1
          fi
    - action: aws:runShellScript
      name: ExecuteTerminateInstance
      precondition:
        StringEquals:
        - platformType
        - Linux
      description: |
        ## Parameters: Role, Region
        This step will perform termination of the instance.
      inputs:
        maxAttempts: 1
        runCommand:
        - |
          #!/bin/bash

          role="{{ RoleArn }}"

          echo "Assuming '${role}'"

          aws sts assume-role --role-arn ${role} --role-session-name TemporarySessionKeys --output json > assume-role-output.json

          export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' assume-role-output.json)
          export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' assume-role-output.json)
          export AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' assume-role-output.json)

          aws ec2 terminate-instances --instance-ids "i-0da74bcaa6357ad60" --region="{{ Region }}"
